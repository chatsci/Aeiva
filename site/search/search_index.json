{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"CODING_GUIDELINES/","title":"Coding Guidelines","text":""},{"location":"CODING_GUIDELINES/#code-hierarchy","title":"Code Hierarchy","text":"<p>Generally, our code can be organized into three different levels:</p> <ol> <li> <p>Framework: This level forms the architectural backbone of your project. It houses the core functionalities that define the basic structure and shared logic for your project. These files, typically stored under the <code>package_name/bases/</code> directory, establish the protocols and high-level operations that the rest of your project will adhere to.</p> </li> <li> <p>Brick: The \"Brick\" level acts as a collection of modular, reusable components used across your project. These components, which are stored in the <code>package_name/xxx/</code> directory, promote code reusability and reduce redundancy, thereby enhancing the efficiency of your codebase.</p> </li> <li> <p>Applications: This level contains specific implementations associated with particular datasets, models, or experiments. These files, which are stored in the <code>package_name/</code> directory, are separate from the abstract base classes and reusable functions found in the other levels. This separation aids in code navigation and readability, making it easier to locate and understand the specific components of your project.</p> </li> </ol> <p>By adhering to this structure, your codebase will be well-organized, easily navigable, and efficient. This organization adheres to best practices in software development, promoting code reusability and a clear separation of concerns.</p>"},{"location":"CODING_GUIDELINES/#generate-requirementstxt","title":"Generate requirements.txt","text":"<p>Use pipreqs: pipreqs is a useful tool that generates a requirements.txt file based on the imports in your Python project, not on the installed packages in your current environment. You can install it and use it as follows:</p> <pre><code>pip install pipreqs\npipreqs --force /path/to/your/project\n</code></pre>"},{"location":"CODING_GUIDELINES/#args-and-kwargs","title":"args and *kwargs","text":"<p><code>*args</code> and <code>**kwargs</code> in Python allow a function to accept optional arguments, meaning that the user can pass a variable number of arguments to these functions. Here's when you might want to use them:</p> <ol> <li> <p>When you're not sure how many arguments might be passed to your function: <code>*args</code> is used to send a non-keyworded variable-length argument list to your function. You might use it when you're not sure how many arguments might be passed to your function, or if you want to support an arbitrary number of arguments.</p> </li> <li> <p>When you want to write a function that must accept a dictionary: <code>**kwargs</code> is used to pass a keyworded, variable-length argument list. You would use this if you want your function to be able to accept a dictionary of attributes.</p> </li> <li> <p>When creating wrapper functions or decorators: <code>*args</code> and <code>**kwargs</code> are commonly used when you're writing higher-order functions or decorators that need to manipulate the inputs to another function that they're wrapping.</p> </li> <li> <p>When subclassing and you want to extend the parent class's methods: In this case, you may not know exactly what the parent class's method takes as arguments. <code>*args</code> and <code>**kwargs</code> let you pass any parameters from the child class to the parent class's method without having to know what those parameters are.</p> </li> </ol> <p>However, while <code>*args</code> and <code>**kwargs</code> are very helpful, they should be used judiciously. Overuse can make your code harder to understand and debug since it's not immediately clear what arguments a function expects. When writing a function, if you know the exact number and role of each argument, it's better to list them explicitly.</p> <p>In summary, <code>*args</code> and <code>**kwargs</code> are powerful tools that make Python functions more flexible. However, as with any tool, they should be used judiciously and appropriately.</p>"},{"location":"CODING_GUIDELINES/#order-of-function-arguments-in-python","title":"Order of Function Arguments in Python","text":"<p>In Python, the recommended order of function parameters is as follows:</p> <ol> <li> <p>Required positional arguments: These are arguments that need to be in a specific positional order. When calling the function, Python interprets them based on their order.</p> <p>Example: <code>def func(name, age):</code></p> </li> <li> <p>Optional positional arguments / Default Parameters: These are arguments that are optional and have a default value. They are also interpreted based on their order.</p> <p>Example: <code>def func(name, age=22):</code></p> </li> <li> <p>Required keyword-only arguments: These are arguments that must be supplied by keyword and follow a \"*,\" in the function definition.</p> <p>Example: <code>def func(name, age, *, city):</code></p> </li> <li> <p>Optional keyword-only arguments / Default Keyword Parameters: These are keyword arguments that are optional. The function will use the default value if no value is provided.</p> <p>Example: <code>def func(name, age, *, city='New York'):</code></p> </li> <li> <p>Arbitrary argument lists: The <code>*args</code> and <code>**kwargs</code> parameters, which collect all positional and keyword arguments that are not already caught by other parameters.</p> <p>Example: <code>def func(name, age, *args, city='New York', **kwargs):</code></p> </li> </ol> <p>This order can help make your function definitions clear and easy to read. It also helps prevent common bugs caused by confusing positional and keyword arguments.</p>"},{"location":"CODING_GUIDELINES/#naming-noun-or-verb","title":"Naming: Noun or Verb?","text":"Thing Choice of Word Modules Noun Data types Noun or Adjective Functions Noun or Verb Constants/Variables Noun <ul> <li>Try to make your name short and avoid longer than 3 words name if possible.</li> <li>Use verb or noun for functions or methods depends on what you want to emphasize: the return result or the process to get the result.</li> </ul> <p>To better choose verbs for functions, below are some suggestions:</p> <ol> <li>Is the function a test? -&gt; test_\\_\\. <li> <p>Does the function has a @property decorator? -&gt; don\u2019t use a verb in the function name.</p> </li> <li> <p>Does the function use a disk or a network:</p> <p>3.1. \u2026 to store data? -&gt; save_to, send, write_to</p> <p>3.2. \u2026 to receive data? -&gt; fetch, load, read</p> </li> <li> <p>Does the function output any data? -&gt; print, output</p> </li> <li> <p>Returns boolean value? -&gt; is_, has_/have_, can_, check_if_\\_\\ <li> <p>Aggregates data? -&gt; calculate, extract, analyze</p> </li> <li> <p>Put data from one form to another:</p> <p>7.1. Creates a single meaningful object? -&gt; create</p> <p>7.2. Fills an existing object with data? -&gt; initialize, configure</p> <p>7.3. Clean raw data? -&gt; clean</p> <p>7.4. Receive a string as input? -&gt; parse</p> <p>7.5. Return a string as output? -&gt; render</p> <p>7.6. Return an iterator as output? -&gt;iter</p> <p>7.7. Mutates its arguments or some global state? -&gt; update, mutate, add, remove, insert, set</p> <p>7.8. Return a list of errors? -&gt; validate</p> <p>7.9. Checks data items recursively? -&gt; walk</p> <p>7.10. Finds appropriate item in data? -&gt; find, search, match</p> <p>7.11. Transform data type? -&gt; \\_to_\\ <p>7.12. None of the above, but still works with data? -&gt; Check one of those: morph, compose, prepare, extract, generate, initialize, filter, map, aggregate, export, import, normalize, calculate .</p>"},{"location":"CODING_GUIDELINES/#install-package","title":"Install package","text":"<p>We can install the package we are developing by the following command:</p> <pre><code>pip install -e .\n</code></pre> <p>It means we are installing it in editable mode. In Python, if you want to be able to edit your package and have the changes be reflected immediately without needing to reinstall the package every time, you can use pip to install the package in \"editable\" mode.</p> <p>If you are worried about the state of your package affecting other parts of your system or other projects, you might consider using a virtual environment. A virtual environment is an isolated Python environment, separate from your system Python and other virtual environments. You can install your package in a virtual environment and make changes and test without worrying about affecting other projects.</p>"},{"location":"CODING_GUIDELINES/#reference","title":"Reference","text":"<p>[1] Naming things properly. </p> <p>[2] Python functions naming: an algorithm.</p>"},{"location":"GENERATE_DOCS/","title":"How to generate docs automatically","text":"<p>In this document, I will introduce how to automatically generate the documentation for your python project with several tools.</p>"},{"location":"GENERATE_DOCS/#install-libraries","title":"Install libraries","text":"<p>We use the following python packages:</p> <ul> <li>MkDocs for building static pages from Markdown</li> <li>mkdocstrings for auto-generating documentation from docstrings in your code</li> <li>Material for MkDocs for styling your documentation</li> </ul> <pre><code>pip install --upgrade pip\npip install mkdocs\npip install mkdocstrings\npip install mkdocs-material\n</code></pre> <p>You can install support for specific languages using extras, for example:</p> <pre><code>pip install 'mkdocstrings[crystal,python]'\n</code></pre>"},{"location":"GENERATE_DOCS/#create-mkdocs-project","title":"Create mkdocs project","text":"<p>Now assume you are in the root directory of your project:</p> <pre><code>mkdocs new .\n</code></pre> <p>You will see:</p> <pre><code>INFO    -  Writing config file: ./mkdocs.yml\nINFO    -  Writing initial docs: ./docs/index.md\n</code></pre> <p>MkDocs comes with a built-in dev-server that lets you preview your documentation as you work on it. Make sure you're in the same directory as the <code>mkdocs.yml</code> configuration file, and then start the server by running the <code>mkdocs serve</code> command:</p> <pre><code>% mkdocs serve\nINFO    -  Building documentation...\nINFO    -  Cleaning site directory\nWARNING -  Excluding 'README.md' from the site because it conflicts with\n           'index.md'.\nINFO    -  Documentation built in 0.08 seconds\nINFO    -  [14:25:59] Watching paths for changes: 'docs', 'mkdocs.yml'\nINFO    -  [14:25:59] Serving on http://127.0.0.1:8000/\nINFO    -  [14:26:11] Browser connected: http://127.0.0.1:8000/\n</code></pre> <p>Open up http://127.0.0.1:8000/ in your browser, and you'll see the default home page being displayed.</p>"},{"location":"GENERATE_DOCS/#customize-your-mkdocsyml","title":"Customize your mkdocs.yml","text":"<p>We can customize the style of our documentation. Edit the ./mkdocs.yml file:</p> <pre><code>site_name: your-project-name\nsite_url: your-project-website\nnav:\n  - Home: index.md\ntheme:\n  name: \"material\"\n</code></pre> <p>This way, we can use the material theme. You can also use other themes [1,2].</p>"},{"location":"GENERATE_DOCS/#add-more-markdown-files-to-the-documentation","title":"Add more markdown files to the documentation","text":"<p>As described in [1], we can follow the structure proposed in the Di\u00e1taxis documentation framework, which suggests splitting your documentation into four distinct parts:</p> <ul> <li>Tutorials</li> <li>How-To Guides</li> <li>Reference</li> <li>Explanation</li> </ul> <p>Therefore, we can create these markdown files and put them into the ./docs/ folder. Then we edit our mkdocs.yml configuration file to add them:</p> <pre><code>site_name: your-project-name\nsite_url: your-project-website\n\nnav:\n  - index.md\n  - tutorials.md\n  - how-to-guides.md\n  - reference.md\n  - explanation.md\n\ntheme:\n  name: \"material\"\n</code></pre> <p>We can also edit the titles for each page, adjust their order, and so on. See [1] for more details.</p>"},{"location":"GENERATE_DOCS/#generate-document-from-docstrings","title":"Generate document from Docstrings","text":"<p>We need to use <code>mkdocstrings</code> package for this purpose.</p> <p>MkDocs is a static-site generator geared toward writing documentation. However, you can\u2019t fetch docstring information from your code using MkDocs alone. You can make it work with an additional package called mkdocstrings.</p> <p>You already installed mkdocstrings into your virtual environment at the beginning of this tutorial, so you only need to add it as a plugin to your MkDocs configuration file:</p> <pre><code>site_name: your-project-name\nsite_url: your-project-website\n\nplugins:\n  - mkdocstrings\n\nnav:\n  - index.md\n  - tutorials.md\n  - how-to-guides.md\n  - reference.md\n  - explanation.md\n\ntheme:\n  name: \"material\"\n</code></pre> <p>Now, to generate documentation from soruce code docstrings, we can select a markdown file, e.g., the reference.md file we have created, and put identifiers in it.</p> <p>Mkdocstrings allows you to insert docstring information right into your Markdown pages using a special syntax of three colons (:::) followed by the code identifier that you want to document:</p> <pre><code>::: identifier\n</code></pre> <p>The identifier is a string identifying the object you want to document. The format of an <code>identifier</code> can vary from one handler to another. For example, the Python handler expects the full dotted-path to a Python object: <code>my_package.my_module.MyClass.my_method</code> [3]. See [3] for more detailed tutorials. Briefly summarize, with mkdocstrings, we can use identifiers to gather the docstrings in our code and turn them into documentation.</p>"},{"location":"GENERATE_DOCS/#more","title":"More","text":"<p>Please read [1,2,3,4] for more detailed tutorials.</p>"},{"location":"GENERATE_DOCS/#reference","title":"Reference","text":"<p>[1] Build Your Python Project Documentation With MkDocs</p> <p>[2] Getting Started with MkDocs</p> <p>[3] mkdocstrings.github.io/</p> <p>4(https://github.com/squidfunk/mkdocs-material)</p> <p>[5] Di\u00e1taxis A systematic approach to technical documentation authoring.</p>"},{"location":"ROADMAP/","title":"Roadmap","text":"<p>In this document, we describe the long- and short-term objectives of this project, as well as show the current plan in achieving the objectives.</p>"},{"location":"ROADMAP/#long-term-objective","title":"Long-term Objective","text":"<p>Enable Aeiva to learn from multimodal and embodied environments with high learning efficiency and low-resource requirements. Specifically, we aim to research on the following aspects:</p> <ul> <li> <p>Multimodal learning</p> <ul> <li>Be able to learn from video data, which is the main modality for human beings.</li> <li>Be able to intergrate different modalities, e.g., text, image, audio, video, documents, and so on.</li> </ul> </li> <li> <p>Embodied learning</p> <ul> <li>Be able to learn from embodied environments, e.g., MineDojo or any other video games, without reading internal states (i.e., by just observing raw visual inputs).</li> <li>Be able to imagine the environment of videos and learn from them.</li> <li>Unify the learning paradigm in different environments and different modalities.</li> </ul> </li> <li> <p>AI for Science</p> <ul> <li>Health</li> <li>Material Science</li> </ul> </li> <li> <p>Safe, Controllable, Interpretable AI</p> <ul> <li>Research on techniques to ensure safe, controllable, and interpretable AI</li> </ul> </li> <li> <p>Efficient learning</p> <ul> <li>Understand how LLMs learn with large-scale data</li> <li>Improve the learning efficiency of language models.</li> <li>Reducing the model size while maintaining the capability of models.</li> <li>The final goal is approaching or even surpassing the learning and energy efficiency of human brain.</li> </ul> </li> <li> <p>Artificial Neural Science</p> <ul> <li>Understand LLMs and other DL models: what they learned, how they learn, and how to improve.</li> <li>Intergrating neural science knowledge to improve DL models.</li> </ul> </li> <li> <p>Manipulating tools</p> <ul> <li>Enable the models to utilize tools, quickly learn new tools, and interact with different environments with tools</li> </ul> </li> <li> <p>AI Society</p> <ul> <li>Evolving a society of AI agents</li> <li>Combining AI agents with virtual environment</li> <li>Agents learn to solve problems in real-world</li> <li>Ensure the human rights</li> </ul> </li> </ul>"},{"location":"ROADMAP/#short-term-objective-keep-updating","title":"Short-term objective (keep updating)","text":"<p>The long-term objective of this project is quite ambitious. At the first place, we want to better understand how the current LLMs learn, and improve the multimodal and embodied learning. Specifically, we want to learn from videos efficiently. Below is a list of milestones we aim to achieve in a short-term (keep updating):</p> <ul> <li>Multimodal Learning<ul> <li>Benchmarking several existing multimodal LLMs in a unified manner</li> <li>Making model construction as easy as playing LEGO</li> <li>Unifing different datasets</li> <li>Define the general framework of multimodal learning</li> </ul> </li> <li>Embodied Learning<ul> <li>Integrating several embodied environments, e.g., MineDojo, Alfred, etc.</li> <li>Completing the framework of embodied learning, i.e., equiping LLMs with environments, actions, rewards, goals, and so on.</li> </ul> </li> <li>AI Agent<ul> <li>Design agent and related classes</li> <li>Design memory module</li> <li>Design world model module</li> <li>Design actions, rewards, etc.</li> <li>Implement several learning algorithms.</li> </ul> </li> <li>AI Society<ul> <li>Design AI community and communication protocals</li> <li>Add visualizatioin UI</li> </ul> </li> </ul> <p>......</p>"},{"location":"explanation/","title":"Explanation","text":""},{"location":"how-to-guides/","title":"How-to-guides","text":""},{"location":"install_minedojo/","title":"Install MineDojo platform on MacBook Pro with M1 Chip","text":""},{"location":"install_minedojo/#setup-java-environment","title":"Setup Java Environment","text":"<p>I followed the instructions on: https://docs.minedojo.org/sections/getting_started/install.html#prerequisites</p> <p>Specifically, remember to list all installed Java and and export the temurin8 version java:</p> <pre><code>/usr/libexec/java_home -V\nexport JAVA_HOME=path/to/eclipse/temurin8\n</code></pre> <p>After run</p> <pre><code>java -version\n</code></pre> <p>I got</p> <pre><code>openjdk version \"1.8.0_332\"\nOpenJDK Runtime Environment (Temurin)(build 1.8.0_332-b09)\nOpenJDK 64-Bit Server VM (Temurin)(build 25.332-b09, mixed mode)\n</code></pre>"},{"location":"install_minedojo/#install-minedojo","title":"Install MineDojo","text":"<p>I used the following command: (Assume Java JDK 8 is already installed)</p> <pre><code>pip3 install setuptools==65.5.0 pip==21\npip3 install gym==0.21\ngit clone https://github.com/MineDojo/MineDojo &amp;&amp; cd MineDojo\npip install -e .\n</code></pre> <p>Note: I found that at the end, if I install from source, I cannot remove the source directory. So after resolved all the bugs as follows, I reinstalled minedojo via pip in my conda virtual env:</p> <pre><code>pip install minedojo\n</code></pre> <p>So I would recommend install via pip rather than from source.</p>"},{"location":"install_minedojo/#debug-experience","title":"Debug experience","text":"<p>There are many different bugs when I try to run</p> <pre><code>python scripts/validate_install.py\n</code></pre> <p>Below, I list all the operations I have done.</p>"},{"location":"install_minedojo/#upgraded-gradle","title":"Upgraded gradle","text":"<p>Check the following: https://gradle.org/install/</p> <p>After installed the new gradle, I got:</p> <pre><code>&gt;&gt;&gt; gradle -v\n\n------------------------------------------------------------\nGradle 8.2.1\n------------------------------------------------------------\n\nBuild time:   2023-07-10 12:12:35 UTC\nRevision:     a38ec64d3c4612da9083cc506a1ccb212afeecaa\n\nKotlin:       1.8.20\nGroovy:       3.0.17\nAnt:          Apache Ant(TM) version 1.10.13 compiled on January 4 2023\nJVM:          1.8.0_332 (Temurin 25.332-b09)\nOS:           Mac OS X 10.16 x86_64\n\n</code></pre>"},{"location":"install_minedojo/#malmo-errors","title":"Malmo errors","text":"<p>I referred to: https://github.com/MineDojo/MineDojo/issues/32#issuecomment-1237247417  It says:</p> <p>For Deprecated Gradle feature --&gt; Go to Malmo project download latest prebuild version https://github.com/Microsoft/malmo/releases. Then find and replace the Malmo directory in your python package directory @ xxx/minedojo/sim/Malmo on your computer. (Reminder directory shall keep the same name \"Malmo\")</p> <p>For \"OpenGL: ERROR RuntimeException: No OpenGL context found in the current thread.\" (X Error &amp; bad value) --&gt; make sure you run sudo apt update &amp;&amp; sudo apt upgrade before you compile the minecraft java program as the same problem has been described in https://stackoverflow.com/questions/28867285/lwjgl-reports-that-opengl-is-not-supported-on-a-modern-nvidia-card. This works for me.</p> <p>Before running python Minedojo code, go xxx/minedojo/sim/Malmo/Minecraft/ where your python put minedojo package and execute ./launchClient.sh (for linux/unix) or .\\launchClient (for windows, there's a launchClient.bat file) and make sure it can run normally before you start with Minedojo.</p> <p>Specifically, when I try to run ./launchClient.sh, I got error due to tools.jar, so I did the following:</p> <pre><code>copy tools.jar from \n/Library/Java/JavaVirtualMachines/temurin-8.jdk/Contents/Home/lib\nto\n/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home/lib\n\n&gt;&gt;&gt; sudo copy XXX XXX\npasswd: (For me, it is the same as the passwd when I login to my macbook pro: the name :)\n</code></pre> <p>Then, it still fail. So I used back the original Malmo in MineDojo installation (i.e., maybe we DON'T need to download latest prebuild version https://github.com/Microsoft/malmo/releases and then find and replace the Malmo directory in your python package directory ). </p> <p>Now it can run. But still some error due to </p> <pre><code>raise NoSuchProcess(self.pid, self._name)\npsutil.NoSuchProcess: process no longer exists (pid=50957, name='bash')\n</code></pre> <p>I removed the </p> <pre><code>env.close()\n</code></pre> <p>in the script and it works.</p> <p>This is not the end of the story: I found the script doesn't always work. Sometimes, I don't need to remvoe the <code>env.close()</code> and it still works. Sometimes it doesn't work due to errors like</p> <pre><code>...\n    at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:163)\n    at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:165)\n    at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:273)\n    at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:125)\n    at org.apache.http.impl.execchain.MainClientExec.createTunnelToTarget(MainClientExec.java:473)\n    at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:398)\n    at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:237)\n    at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:185)\n    at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:89)\n    at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:111)\n    at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:185)\n    at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)\n    at org.gradle.internal.resource.transport.http.HttpClientHelper.performHttpRequest(HttpClientHelper.java:148)\n    at org.gradle.internal.resource.transport.http.HttpClientHelper.performHttpRequest(HttpClientHelper.java:126)\n    at org.gradle.internal.resource.transport.http.HttpClientHelper.executeGetOrHead(HttpClientHelper.java:103)\n    at org.gradle.internal.resource.transport.http.HttpClientHelper.performRequest(HttpClientHelper.java:94)\n    ... 171 more\n\n\n* Get more help at https://help.gradle.org\n\nBUILD FAILED in 31s\n\n\nMinecraft process finished unexpectedly. There was an error with Malmo.\n</code></pre> <p>I suppose it is due to some network connection errors?</p> <p>Anyway, now it can work.</p>"},{"location":"reference/","title":"Reference","text":"<p>This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the <code>Aeiva</code> project code.</p> <p>This module contains the data processor.</p> <p>@Author: Bang Liu (chatsci.ai@gmail.com) @Date: 2023-07-11</p> <p>Copyright (C) 2023 Bang Liu - All Rights Reserved. This source code is licensed under the license found in the LICENSE file in the root directory of this source tree.</p>"},{"location":"reference/#src.aeiva.data.processor.process_dataset","title":"<code>process_dataset(formatted_dataset, pipeline, output_dir, dataset_name='')</code>","text":"<p>Process a dataset with a pipeline of functions.</p> <p>Parameters:</p> Name Type Description Default <code>formatted_dataset</code> <code>DataSet</code> <p>the dataset to be processed.</p> required <code>pipeline</code> <code>list[Callable]</code> <p>a list of functions to be applied to the dataset.</p> required <code>output_dir</code> <code>Optional[str]</code> <p>the output directory to save the processed dataset.</p> required <code>dataset_name</code> <code>Optional[str]</code> <p>the name of the dataset. Defaults to \"\".</p> <code>''</code> <p>Returns:</p> Name Type Description <code>DataSet</code> <code>DataSet</code> <p>the processed dataset.</p> Source code in <code>src/aeiva/data/processor.py</code> <pre><code>def process_dataset(formatted_dataset: DataSet,\n                    pipeline: list[Callable],\n                    output_dir: Optional[str],\n                    dataset_name: Optional[str] = \"\") -&gt; DataSet:\n\"\"\"\n    Process a dataset with a pipeline of functions.\n\n    Args:\n        formatted_dataset (DataSet): the dataset to be processed.\n        pipeline (list[Callable]): a list of functions to be applied to the dataset.\n        output_dir (Optional[str]): the output directory to save the processed dataset.\n        dataset_name (Optional[str], optional): the name of the dataset. Defaults to \"\".\n\n    Returns:\n        DataSet: the processed dataset.\n    \"\"\"\n    processed_data = []\n    pipeline = Pipeline(pipeline)\n    for item in formatted_dataset[\"data\"]:\n        processed_data.append(pipeline(item.copy()))\n\n    output = {\"data\": processed_data, \"metadata\": formatted_dataset[\"metadata\"]}\n    if output_dir is not None:\n        ensure_dir(output_dir)\n        dump_json(output, f\"{output_dir}/{dataset_name}_dataset.processed.json\")\n    return output\n</code></pre>"},{"location":"tutorials/","title":"Tutorials","text":""}]}